# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2019, Jupyter Development Team
# This file is distributed under the same license as the nbconvert package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: nbconvert 5.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 12:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/usage.rst:2
msgid "Using as a command line tool"
msgstr ""

#: ../../source/usage.rst:4
msgid "The command-line syntax to run the ``nbconvert`` script is::"
msgstr ""

#: ../../source/usage.rst:8
msgid ""
"This will convert the Jupyter notebook file ``notebook.ipynb`` into the "
"output format given by the ``FORMAT`` string."
msgstr ""

#: ../../source/usage.rst:12
msgid "Default output format - HTML"
msgstr ""

#: ../../source/usage.rst:13
msgid ""
"The default output format is HTML, for which the ``--to`` argument may be"
" omitted::"
msgstr ""

#: ../../source/usage.rst:21
msgid "Supported output formats"
msgstr ""

#: ../../source/usage.rst:22
msgid "The currently supported output formats are:"
msgstr ""

#: ../../source/usage.rst:24
msgid ":ref:`HTML <convert_html>`,"
msgstr ""

#: ../../source/usage.rst:25
msgid ":ref:`LaTeX <convert_latex>`,"
msgstr ""

#: ../../source/usage.rst:26
msgid ":ref:`PDF <convert_pdf>`,"
msgstr ""

#: ../../source/usage.rst:27
msgid ":ref:`Reveal.js HTML slideshow <convert_revealjs>`,"
msgstr ""

#: ../../source/usage.rst:28
msgid ":ref:`Markdown <convert_markdown>`,"
msgstr ""

#: ../../source/usage.rst:29
msgid ":ref:`reStructuredText <convert_rst>`,"
msgstr ""

#: ../../source/usage.rst:30
msgid ":ref:`executable script <convert_script>`,"
msgstr ""

#: ../../source/usage.rst:31
msgid ":ref:`notebook <convert_notebook>`."
msgstr ""

#: ../../source/usage.rst:33
msgid ""
"Jupyter also provides a few templates for output formats. These can be "
"specified via an additional ``--template`` argument and are listed in the"
" sections below."
msgstr ""

#: ../../source/usage.rst:40
msgid "HTML"
msgstr ""

#: ../../source/usage.rst:41
msgid "``--to html``"
msgstr ""

#: ../../source/usage.rst:43
msgid "``--template full`` (default)"
msgstr ""

#: ../../source/usage.rst:45
msgid ""
"A full static HTML render of the notebook. This looks very similar to the"
" interactive view."
msgstr ""

#: ../../source/usage.rst:48
msgid "``--template basic``"
msgstr ""

#: ../../source/usage.rst:50
msgid ""
"Simplified HTML, useful for embedding in webpages, blogs, etc. This "
"excludes HTML headers."
msgstr ""

#: ../../source/usage.rst:56
msgid "LaTeX"
msgstr ""

#: ../../source/usage.rst:57
msgid "``--to latex``"
msgstr ""

#: ../../source/usage.rst:59
msgid ""
"Latex export.  This generates ``NOTEBOOK_NAME.tex`` file, ready for "
"export."
msgstr ""

#: ../../source/usage.rst:62
msgid "``--template article`` (default)"
msgstr ""

#: ../../source/usage.rst:64
msgid "Latex article, derived from Sphinx's howto template."
msgstr ""

#: ../../source/usage.rst:66
msgid "``--template report``"
msgstr ""

#: ../../source/usage.rst:68
msgid "Latex report, providing a table of contents and chapters."
msgstr ""

#: ../../source/usage.rst:70
msgid "``--template base``"
msgstr ""

#: ../../source/usage.rst:72
msgid ""
"Very basic latex output - mainly meant as a starting point for custom "
"templates."
msgstr ""

#: ../../source/usage.rst:77 ../../source/usage.rst:201
#: ../../source/usage.rst:257
msgid ""
"nbconvert uses pandoc_ to convert between various markup languages, so "
"pandoc is a dependency when converting to latex or reStructuredText."
msgstr ""

#: ../../source/usage.rst:83
msgid "PDF"
msgstr ""

#: ../../source/usage.rst:84
msgid "``--to pdf``"
msgstr ""

#: ../../source/usage.rst:86
msgid "Generates a PDF via latex. Supports the same templates as ``--to latex``."
msgstr ""

#: ../../source/usage.rst:91
msgid "Reveal.js HTML slideshow"
msgstr ""

#: ../../source/usage.rst:92
msgid "``--to slides``"
msgstr ""

#: ../../source/usage.rst:94
msgid "This generates a Reveal.js HTML slideshow."
msgstr ""

#: ../../source/usage.rst:96
msgid "Running this slideshow requires a copy of reveal.js (version 3.x)."
msgstr ""

#: ../../source/usage.rst:98
msgid ""
"By default, this will include a script tag in the html that will directly"
" load reveal.js from a public CDN."
msgstr ""

#: ../../source/usage.rst:101
msgid ""
"This means that if you include your slides on a webpage, they should work"
" as expected. However, some features (specifically, speaker notes & "
"timers) will not work on website because they require access to a local "
"copy of reveal.js."
msgstr ""

#: ../../source/usage.rst:105
msgid ""
"Speaker notes require a local copy of reveal.js. Then, you need to tell "
"``nbconvert`` how to find that local copy."
msgstr ""

#: ../../source/usage.rst:108
msgid ""
"Timers only work if you already have speaker notes, but also require a "
"local https server. You can read more about this in "
"ServePostProcessorExample_."
msgstr ""

#: ../../source/usage.rst:111
msgid ""
"To make this clearer, let's look at an example of how to get speaker "
"notes working with a local copy of reveal.js: SlidesWithNotesExample_."
msgstr ""

#: ../../source/usage.rst:116
msgid ""
"In order to designate a mapping from notebook cells to Reveal.js slides, "
"from within the Jupyter notebook, select menu item View --> Cell Toolbar "
"--> Slideshow. That will reveal a drop-down menu on the upper-right of "
"each cell.  From it, one may choose from \"Slide,\" \"Sub-Slide\", "
"\"Fragment\", \"Skip\", and \"Notes.\"  On conversion, cells designated "
"as \"skip\" will not be included, \"notes\" will be included only in "
"presenter notes, etc."
msgstr ""

#: ../../source/usage.rst:127
msgid "Example: creating slides w/ speaker notes"
msgstr ""

#: ../../source/usage.rst:129
msgid ""
"Let's suppose you have a notebook ``your_talk.ipynb`` that you want to "
"convert to slides. For this example, we'll assume that you are working in"
" the same directory as the notebook you want to convert (i.e., when you "
"run ``ls .``, ``your_talk.ipynb`` shows up amongst the list of files)."
msgstr ""

#: ../../source/usage.rst:134
msgid ""
"First, we need a copy of reveal.js in the same directory as your slides. "
"One way to do this is to use the following commands in your terminal:"
msgstr ""

#: ../../source/usage.rst:144
msgid ""
"Then we need to tell nbconvert to point to this local copy. To do that we"
" use the ``--reveal-prefix`` command line flag to point to the local "
"copy."
msgstr ""

#: ../../source/usage.rst:151
msgid ""
"This will create file ``your_talk.slides.html``, which you should be able"
" to access with ``open your_talk.slides.html``. To access the speaker "
"notes, press ``s`` after the slides load and they should open in a new "
"window."
msgstr ""

#: ../../source/usage.rst:155
msgid ""
"Note: This does not enable slides that run completely offline. While you "
"have a local copy of reveal.js, by default, the slides need to access "
"mathjax, require, and jquery via a public CDN. Addressing this use case "
"is an open issue and `PRs <https://github.com/jupyter/nbconvert/pulls>`_ "
"are always encouraged."
msgstr ""

#: ../../source/usage.rst:163
msgid "Serving slides with an https server: ``--post serve``"
msgstr ""

#: ../../source/usage.rst:165
msgid ""
"Once you have speaker notes working you may notice that your timers don't"
" work. Timers require a bit more infrastructure; you need to serve your "
"local copy of reveal.js from a local https server."
msgstr ""

#: ../../source/usage.rst:169
msgid ""
"Fortunately, ``nbconvert`` makes this fairly straightforward through the "
"use of the ``ServePostProcessor``. To activate this server, we append the"
" command line flag ``--post serve`` to our call to nbconvert."
msgstr ""

#: ../../source/usage.rst:177
msgid ""
"This will run the server, which will occupy the terminal that you ran the"
" command in until you stop it. You can stop the server by pressing ``ctrl"
" C`` twice."
msgstr ""

#: ../../source/usage.rst:184
msgid "Markdown"
msgstr ""

#: ../../source/usage.rst:185
msgid "``--to markdown``"
msgstr ""

#: ../../source/usage.rst:187
msgid ""
"Simple markdown output.  Markdown cells are unaffected, and code cells "
"indented 4 spaces."
msgstr ""

#: ../../source/usage.rst:193
msgid "reStructuredText"
msgstr ""

#: ../../source/usage.rst:194
msgid "``--to rst``"
msgstr ""

#: ../../source/usage.rst:196
msgid ""
"Basic reStructuredText output. Useful as a starting point for embedding "
"notebooks in Sphinx docs."
msgstr ""

#: ../../source/usage.rst:207
msgid "Executable script"
msgstr ""

#: ../../source/usage.rst:208
msgid "``--to script``"
msgstr ""

#: ../../source/usage.rst:210
msgid ""
"Convert a notebook to an executable script. This is the simplest way to "
"get a Python (or other language, depending on the kernel) script out of a"
" notebook. If there were any magics in an Jupyter notebook, this may only"
" be executable from a Jupyter session."
msgstr ""

#: ../../source/usage.rst:215
msgid "For example, to convert a Julia notebook to a Julia executable script::"
msgstr ""

#: ../../source/usage.rst:222
msgid "Notebook and preprocessors"
msgstr ""

#: ../../source/usage.rst:223
msgid "``--to notebook``"
msgstr ""

#: ../../source/usage.rst:227
msgid ""
"This doesn't convert a notebook to a different format *per se*, instead "
"it allows the running of nbconvert preprocessors on a notebook, and/or "
"conversion to other notebook formats. For example::"
msgstr ""

#: ../../source/usage.rst:233
msgid ""
"This will open the notebook, execute it, capture new output, and save the"
" result in :file:`mynotebook.nbconvert.ipynb`. Specifying ``--inplace`` "
"will overwrite the input file instead of writing a new file. By default, "
"``nbconvert`` will abort conversion if any exceptions occur during "
"execution of a cell. If you specify ``--allow-errors`` (in addition to "
"the `--execute`` flag) then conversion will continue and the output from "
"any exception will be included in the cell output."
msgstr ""

#: ../../source/usage.rst:241
msgid "The following command::"
msgstr ""

#: ../../source/usage.rst:245
msgid ""
"will create a copy of :file:`mynotebook.ipynb` in "
":file:`mynotebook.v3.ipynb` in version 3 of the notebook format."
msgstr ""

#: ../../source/usage.rst:248
msgid ""
"If you want to convert a notebook in-place, you can specify the output "
"file to be the same as the input file::"
msgstr ""

#: ../../source/usage.rst:253
msgid "Be careful with that, since it will replace the input file."
msgstr ""

#: ../../source/usage.rst:262
msgid ""
"The output file created by ``nbconvert`` will have the same base name as "
"the notebook and will be placed in the current working directory. Any "
"supporting files (graphics, etc) will be placed in a new directory with "
"the same base name as the notebook, suffixed with ``_files``::"
msgstr ""

#: ../../source/usage.rst:271
msgid ""
"For simple single-file output, such as html, markdown, etc., the output "
"may be sent to standard output with::"
msgstr ""

#: ../../source/usage.rst:277
msgid "Converting multiple notebooks"
msgstr ""

#: ../../source/usage.rst:278
msgid "Multiple notebooks can be specified from the command line::"
msgstr ""

#: ../../source/usage.rst:283
msgid ""
"or via a list in a configuration file, say ``mycfg.py``, containing the "
"text::"
msgstr ""

#: ../../source/usage.rst:288
msgid "and using the command::"
msgstr ""

